// (C) 2013-2015, Sergei Zaychenko, KNURE, Kharkiv, Ukraine

/*****************************************************************************/

#include "integer_sequence.hpp"

#include <iostream>


/*****************************************************************************/


// Конструктор
IntegerSequence::IntegerSequence ( int nAllocated )
{
	m_nUsed = 0;
	m_nAllocated = nAllocated;
	m_pData = new int[ m_nAllocated ];
}


/*****************************************************************************/


// Деструктор
IntegerSequence::~IntegerSequence ()
{
	delete[] m_pData;
}


/*****************************************************************************/


// Внутренняя функция увеличения объема памяти последовательности вдвое с переносом данных
void IntegerSequence::Grow ()
{
	// Предел объема хранения достигнут. Выделяем вдвое больший массив
	int newAllocated = m_nAllocated << 1;
	int * pTemp = new int[ newAllocated ];

	// Копируем данные из прежнего массива в новый.
	memcpy( pTemp, m_pData, sizeof( int ) * m_nUsed );

	// Освобождаем прежний блок
	delete[] m_pData;

	// Подменяем указатель на блок и размер в массиве на новые
	m_pData = pTemp;
	m_nAllocated = newAllocated;
}


/*****************************************************************************/


// Функция-член добавления значения в конец последовательности
void IntegerSequence::PushBack ( int value )
{
	// Достиг ли массив пределов выделенного объема памяти?
	if ( m_nAllocated == m_nUsed )
		// Увеличиваем объем блока вдвое - используем this для вызова обычной функции
		Grow();

	// В данной точке места для хранения достаточно.
	// Помещаем новое данное в массив и увеличиваем счетчик хранящихся элементов
	m_pData[ m_nUsed++ ] = value;
}


/*****************************************************************************/


// Функция-член ввода последовательности
void IntegerSequence::ReadTillZero ()
{
	// Цикл ввода
	while ( true )
	{
		// Вводим очередное число с клавиатуры
		int value;
		std::cin >> value;

		// Если число не является положительным, выходим из цикла
		if ( value <= 0 )
			break;

		// Помещаем число в конец последовательности
		PushBack( value ); // эквивалентно this->PushBack( value );
	}
}


/*****************************************************************************/


// Функция подсчета суммы последовательности чисел
int IntegerSequence::Accumulate () const
{
	int sum = 0;
	for ( int i = 0; i < m_nUsed; i++ )
		sum += m_pData[ i ];
	return sum;
}


/*****************************************************************************/
